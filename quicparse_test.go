package netem

import (
	"bytes"
	"testing"
)

// QUICInitialBytes contains a QUIC Initial obtained
// from https://quic.xargs.org/#client-initial-packet.
var QUICInitialBytes = []byte{
	// [0:1] packet header byte
	0xcd,

	// [1:5] QUIC version
	0x00, 0x00, 0x00, 0x01,

	// [5:14] destination connection ID (first byte: length)
	0x08, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
	0x07,

	// [14:20] source connection ID (first byte: length)
	0x05, 0x63, 0x5f, 0x63, 0x69, 0x64,

	// [20:21] token
	0x00,

	// [21:23] packet length
	0x41, 0x03,

	// [23:24] packet number
	0x98,

	// encrypted payload
	0x1c, 0x36, 0xa7, 0xed, 0x78, 0x71, 0x6b, 0xe9, 0x71, 0x1b, 0xa4, 0x98, 0xb7, 0xed, 0x86, 0x84, 0x43, 0xbb, 0x2e, 0x0c, 0x51, 0x4d, 0x4d, 0x84, 0x8e, 0xad, 0xcc, 0x7a, 0x00, 0xd2, 0x5c, 0xe9, 0xf9, 0xaf, 0xa4, 0x83, 0x97, 0x80, 0x88, 0xde, 0x83, 0x6b, 0xe6, 0x8c, 0x0b, 0x32, 0xa2, 0x45, 0x95, 0xd7, 0x81, 0x3e, 0xa5, 0x41, 0x4a, 0x91, 0x99, 0x32, 0x9a, 0x6d, 0x9f, 0x7f, 0x76, 0x0d, 0xd8, 0xbb, 0x24, 0x9b, 0xf3, 0xf5, 0x3d, 0x9a, 0x77, 0xfb, 0xb7, 0xb3, 0x95, 0xb8, 0xd6, 0x6d, 0x78, 0x79, 0xa5, 0x1f, 0xe5, 0x9e, 0xf9, 0x60, 0x1f, 0x79, 0x99, 0x8e, 0xb3, 0x56, 0x8e, 0x1f, 0xdc, 0x78, 0x9f, 0x64, 0x0a, 0xca, 0xb3, 0x85, 0x8a, 0x82, 0xef, 0x29, 0x30, 0xfa, 0x5c, 0xe1, 0x4b, 0x5b, 0x9e, 0xa0, 0xbd, 0xb2, 0x9f, 0x45, 0x72, 0xda, 0x85, 0xaa, 0x3d, 0xef, 0x39, 0xb7, 0xef, 0xaf, 0xff, 0xa0, 0x74, 0xb9, 0x26, 0x70, 0x70, 0xd5, 0x0b, 0x5d, 0x07, 0x84, 0x2e, 0x49, 0xbb, 0xa3, 0xbc, 0x78, 0x7f, 0xf2, 0x95, 0xd6, 0xae, 0x3b, 0x51, 0x43, 0x05, 0xf1, 0x02, 0xaf, 0xe5, 0xa0, 0x47, 0xb3, 0xfb, 0x4c, 0x99, 0xeb, 0x92, 0xa2, 0x74, 0xd2, 0x44, 0xd6, 0x04, 0x92, 0xc0, 0xe2, 0xe6, 0xe2, 0x12, 0xce, 0xf0, 0xf9, 0xe3, 0xf6, 0x2e, 0xfd, 0x09, 0x55, 0xe7, 0x1c, 0x76, 0x8a, 0xa6, 0xbb, 0x3c, 0xd8, 0x0b, 0xbb, 0x37, 0x55, 0xc8, 0xb7, 0xeb, 0xee, 0x32, 0x71, 0x2f, 0x40, 0xf2, 0x24, 0x51, 0x19, 0x48, 0x70, 0x21, 0xb4, 0xb8, 0x4e, 0x15, 0x65, 0xe3, 0xca, 0x31, 0x96, 0x7a, 0xc8, 0x60, 0x4d, 0x40, 0x32, 0x17, 0x0d, 0xec, 0x28, 0x0a, 0xee, 0xfa, 0x09, 0x5d, 0x08,

	// authentication tag
	0xb3, 0xb7, 0x24, 0x1e, 0xf6, 0x64, 0x6a, 0x6c, 0x86, 0xe5, 0xc6, 0x2c, 0xe0, 0x8b, 0xe0, 0x99,
}

type test struct {
	input     []byte
	expect    QUICClientInitial
	expectErr error
	name      string
}

func TestUnmarshalQUICInitial(t *testing.T) {
	tests := []test{
		{
			name:  "with valid Client Initial",
			input: QUICInitialBytes,
			expect: QUICClientInitial{
				FirstByte:             QUICInitialBytes[0],
				QUICVersion:           1,
				DestinationID:         QUICInitialBytes[6:14],
				SourceID:              QUICInitialBytes[15:20],
				Token:                 nil,
				Length:                []byte{QUICInitialBytes[21] & 0b00111111, QUICInitialBytes[22]},
				PnOffset:              23,
				Payload:               nil,
				DecryptedPacketNumber: nil,
				DecryptedPayload:      nil,
			},
			expectErr: nil,
		},
		{
			name:  "with empty input",
			input: []byte{},
			expect: QUICClientInitial{
				FirstByte:             0,
				QUICVersion:           0,
				DestinationID:         nil,
				SourceID:              nil,
				Token:                 nil,
				Length:                nil,
				PnOffset:              0,
				Payload:               nil,
				DecryptedPacketNumber: nil,
				DecryptedPayload:      nil,
			},
			expectErr: parseError,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ci, _, err := NewQUICClientInitial(tt.input)
			if err != tt.expectErr {
				t.Fatal("unexpected error", err, tt.expectErr)
			}
			if err != nil {
				return
			}
			if ci.FirstByte != tt.expect.FirstByte {
				t.Fatal("unexpected First Byte", ci.FirstByte)
			}
			if ci.QUICVersion != tt.expect.QUICVersion {
				t.Fatal("unexpected QUIC version")
			}
			if !bytes.Equal(ci.DestinationID, tt.expect.DestinationID) {
				t.Fatal("unexpected QUIC Destination Connection ID")
			}
			if !bytes.Equal(ci.SourceID, tt.expect.SourceID) {
				t.Fatal("unexpected QUIC Source Connection ID")
			}
			if !bytes.Equal(ci.Token, tt.expect.Token) {
				t.Fatal("unexpected QUIC Token")
			}
			if !bytes.Equal(ci.Length, tt.expect.Length) {
				t.Fatalf("unexpected Length %b %b", ci.Length, tt.expect.Length)
			}
			if ci.PnOffset != tt.expect.PnOffset {
				t.Fatal("unexpected Packet Number Offset")
			}
			if !bytes.Equal(ci.Payload, tt.expect.Payload) {
				t.Fatal("unexpected encrypted payload", len(ci.Payload), len(tt.expect.Payload))
			}
			if !bytes.Equal(ci.DecryptedPacketNumber, tt.expect.DecryptedPacketNumber) {
				t.Fatal("unexpected decrypted packet number")
			}
			if !bytes.Equal(ci.DecryptedPayload, tt.expect.DecryptedPayload) {
				t.Fatal("unexpected decrypted payload")
			}
		})
	}
}

func TestDecryptQUICClientInitial(t *testing.T) {

}

func TestExtractQUICServerNameExtractQUICServerName(t *testing.T) {
	sni, err := ExtractQUICServerName(QUICInitialBytes)
	if err != nil {
		t.Fatal("unexpected error", err)
	}
	if sni != "example.ulfheim.net" {
		t.Fatal("unexpected Server Name")
	}
}
